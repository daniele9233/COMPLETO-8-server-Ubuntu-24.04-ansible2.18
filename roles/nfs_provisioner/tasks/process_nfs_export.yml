---
# Task file per processare un singolo NFS export
# Questo file viene chiamato dal main.yml per ogni export

- name: Check if namespace exists
  command: kubectl get namespace {{ namespace }}
  environment: "{{ _kube_env }}"
  register: namespace_check
  ignore_errors: yes

- name: Create namespace for provisioner
  command: kubectl create namespace {{ namespace }}
  environment: "{{ _kube_env }}"
  when: namespace_check.rc != 0

- name: Build temporary values file for helm
  copy:
    dest: "/tmp/{{ release_name }}-values.yaml"
    content: |
      # Generated by Ansible: values for {{ release_name }}
      nfs:
        server: "{{ nfs_server }}"
        path: "{{ export_path }}"
      # Try to set storageClass name and whether it becomes the default
      storageClass:
        name: "{{ storageclass_name }}"
      persistence:
        defaultClass: {{ 'true' if (make_storageclass_default | default(false)) else 'false' }}
    mode: '0644'

- name: Helm upgrade --install provisioner
  command: >-
    helm upgrade --install {{ release_name }}
    {{ helm_repo_name | default('nfs-subdir-external-provisioner') }}/nfs-subdir-external-provisioner
    --namespace {{ namespace }}
    --create-namespace
    -f /tmp/{{ release_name }}-values.yaml
    --wait --timeout {{ helm_timeout | default('5m') }}
  environment: "{{ _kube_env }}"
  register: helm_install
  failed_when: helm_install.rc != 0

- name: Wait for provisioner deployment to be ready
  command: kubectl -n {{ namespace }} rollout status deploy nfs-client-provisioner --timeout={{ helm_timeout | default('5m') }}
  environment: "{{ _kube_env }}"
  register: rollout_check
  failed_when: rollout_check.rc != 0
  ignore_errors: yes

- name: Print quick status
  debug:
    msg: |
      Release {{ release_name }} installed in namespace {{ namespace }} (export: {{ export_path }}). 
      StorageClass name suggested: {{ storageclass_name }}. 
      Helm status rc={{ helm_install.rc }} rollout_rc={{ rollout_check.rc }}
