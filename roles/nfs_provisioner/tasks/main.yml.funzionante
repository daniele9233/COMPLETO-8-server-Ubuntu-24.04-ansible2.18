---
# Tasks per il ruolo nfs_provisioner
# Installazione idempotente del Kubernetes nfs-subdir-external-provisioner

- name: Ensure /root/.kube/config exists (fail early if not)
  stat:
    path: /root/.kube/config
  register: kubeconf

- name: Fail if kubeconfig not found (kubectl must be configured on control node)
  fail:
    msg: "/root/.kube/config not present on target host. Run kubectl_setup role first or point KUBECONFIG to a valid file."
  when: not kubeconf.stat.exists

- name: Ensure helm is installed (fast check)
  command: helm version --short
  register: helm_check
  ignore_errors: yes

- name: Install Helm CLI if missing
  when: helm_check.rc != 0
  block:
    - name: Create temp dir for helm
      file:
        path: /tmp/helm_install
        state: directory
        mode: '0755'

    - name: Download Helm tarball
      get_url:
        url: "https://get.helm.sh/helm-{{ helm_version | default('v3.11.0') }}-linux-amd64.tar.gz"
        dest: /tmp/helm_install/helm.tgz
        mode: '0644'

    - name: Extract helm and move binary
      unarchive:
        src: /tmp/helm_install/helm.tgz
        dest: /tmp/helm_install
        remote_src: yes

    - name: Move helm binary to /usr/local/bin
      copy:
        remote_src: yes
        src: /tmp/helm_install/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: '0755'

- name: Add Helm repo (idempotent)
  command: helm repo add {{ helm_repo_name | default('nfs-subdir-external-provisioner') }} {{ helm_repo_url | default('https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/') }}
  register: helm_repo_add
  failed_when: helm_repo_add.rc not in [0,1]
  changed_when: helm_repo_add.rc == 0
  # Rimuovi completamente la sezione args con warn

- name: Update Helm repos
  command: helm repo update

- name: Ensure Helm repo is reachable (search)
  command: helm search repo {{ helm_repo_name | default('nfs-subdir-external-provisioner') }} --max-col-width 80
  register: helm_search

- name: Set KUBECONFIG environment for kubectl/helm interactions
  set_fact:
    _kube_env: { 'KUBECONFIG': '/root/.kube/config' }

- name: Process each NFS export
  include_tasks: process_nfs_export.yml
  vars:
    export_path: "{{ item }}"
    suffix: "{{ (item | regex_replace('^/.*/', '')) | regex_replace('^/', '') | regex_replace('[^a-zA-Z0-9_-]', '-') }}"
    release_name: "{{ helm_release_prefix | default('nfs-subdir-external-provisioner') }}-{{ suffix }}"
    namespace: "{{ namespace_prefix | default('nfs-provisioner') }}-{{ suffix }}"
    storageclass_name: "nfs-{{ suffix }}"
  loop: "{{ nfs_exports }}"
  loop_control:
    label: "{{ item }}"

- name: Show all StorageClasses
  command: kubectl get sc -o wide
  environment: "{{ _kube_env }}"
  register: sc_list
  changed_when: false

- name: Filter NFS StorageClasses
  shell: kubectl get sc -o wide | grep nfs || echo "No NFS StorageClasses found"
  environment: "{{ _kube_env }}"
  register: nfs_sc_list
  changed_when: false

- name: Display all storageclasses
  debug:
    var: sc_list.stdout_lines

- name: Display NFS storageclasses found
  debug:
    var: nfs_sc_list.stdout_lines

- name: Optional test PVC creation (skipped by default)
  when: test_provisioning | default(false)
  block:
    - name: Apply test claim and pod
      command: kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-claim.yaml -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-pod.yaml
      environment: "{{ _kube_env }}"

    - name: Wait for test pod to be running
      command: kubectl wait --for=condition=Ready pod/test-pod --timeout=120s
      environment: "{{ _kube_env }}"
